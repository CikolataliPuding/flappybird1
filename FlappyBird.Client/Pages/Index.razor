@page "/"

<h1>Flappy Bird (C# - Blazor WASM)</h1>

<div class="hud">
  <div>Puan: @score<span>@(highScore > 0 ? $" / En İyi: {highScore}" : string.Empty)</span></div>
  <div>
    <button class="btn" @onclick="Restart">Yeniden Başlat</button>
  </div>
  <div>@(isRunning ? "Oyun: Açık" : "Oyun: Durdu")</div>
  </div>

<div class="canvas-wrap" tabindex="0" @onkeydown="HandleKeyDown" @onclick="OnClickOrTouch" @ontouchstart="OnClickOrTouch">
  <svg width="480" height="720" viewBox="0 0 480 720">
    <rect width="480" height="720" fill="#14161b" />

    @foreach (var pipe in pipes)
    {
        <g>
            <rect x="@pipe.X" y="0" width="@PipeWidth" height="@pipe.GapY - @PipeGapHalf" fill="#3cb371" />
            <rect x="@pipe.X" y="@(@pipe.GapY + PipeGapHalf)" width="@PipeWidth" height="@("720")" fill="#3cb371" />
        </g>
    }

    <circle cx="@bird.X" cy="@bird.Y" r="14" fill="#ffd166" stroke="#f7a428" stroke-width="3" />
  </svg>
</div>

<div class="legend">Kontroller: Zıpla: Space / Mouse tıklama / Dokunma</div>

@code {
  private const float Gravity = 1200f;
  private const float JumpVelocity = -360f;
  private const float PipeSpeed = 150f;
  private const float PipeSpacing = 210f;
  private const float PipeGap = 160f;
  private const float PipeWidth = 64f;
  private float PipeGapHalf => PipeGap / 2f;

  private bool isRunning = false;
  private int score = 0;
  private int highScore = 0;
  private double lastTimestamp;

  private Bird bird = new(120f, 360f);
  private readonly List<Pipe> pipes = new();

  protected override async Task OnInitializedAsync()
  {
    ResetGame();
    highScore = await GetHighScoreAsync();
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      _ = StartGameLoop();
      isRunning = true;
      StateHasChanged();
    }
  }

  private async Task StartGameLoop()
  {
    var sw = new System.Diagnostics.Stopwatch();
    sw.Start();
    lastTimestamp = 0;

    while (true)
    {
      await Task.Yield();
      var t = sw.Elapsed.TotalSeconds;
      var dt = t - lastTimestamp;
      lastTimestamp = t;

      if (isRunning)
      {
        Update((float)dt);
      }

      StateHasChanged();
      await Task.Delay(1000 / 60);
    }
  }

  private void Update(float dt)
  {
    bird.VY += Gravity * dt;
    bird.Y += bird.VY * dt;

    for (int i = pipes.Count - 1; i >= 0; i--)
    {
      var p = pipes[i];
      p.X -= PipeSpeed * dt;

      if (p.X + PipeWidth < 0)
      {
        pipes.RemoveAt(i);
        score++;
      }
      else
      {
        pipes[i] = p;
      }
    }

    var needNew = pipes.Count == 0 || (480 - (pipes[^1].X + PipeWidth)) >= PipeSpacing;
    if (needNew)
    {
      var rnd = Random.Shared.Next(150, 570);
      pipes.Add(new Pipe(480, rnd));
    }

    if (bird.Y < 0 || bird.Y > 720)
    {
      GameOver();
      return;
    }

    foreach (var p in pipes)
    {
      var bx = bird.X;
      var by = bird.Y;
      var withinX = bx + 14 >= p.X && bx - 14 <= p.X + PipeWidth;
      var topBottomHit = by - 14 <= p.GapY - PipeGapHalf || by + 14 >= p.GapY + PipeGapHalf;
      if (withinX && topBottomHit)
      {
        GameOver();
        return;
      }
    }
  }

  private void Jump()
  {
    if (!isRunning) return;
    bird.VY = JumpVelocity;
  }

  private void GameOver()
  {
    isRunning = false;
    if (score > highScore)
    {
      highScore = score;
      _ = SetHighScoreAsync(highScore);
    }
  }

  private void Restart()
  {
    ResetGame();
    isRunning = true;
  }

  private void HandleKeyDown(KeyboardEventArgs e)
  {
    if (e.Key == " " || e.Code == "Space" || e.Key == "ArrowUp")
    {
      Jump();
    }
    else if (!isRunning && (e.Key == "Enter" || e.Code == "Enter"))
    {
      Restart();
    }
  }

  private void OnClickOrTouch()
  {
    if (!isRunning)
    {
      Restart();
    }
    else
    {
      Jump();
    }
  }

  private void ResetGame()
  {
    score = 0;
    bird = new Bird(120f, 360f);
    pipes.Clear();
  }

  private record struct Bird(float X, float Y)
  {
    public float X = X;
    public float Y = Y;
    public float VY = 0f;
  }

  private record struct Pipe(float X, float GapY)
  {
    public float X = X;
    public float GapY = GapY;
  }

  [Inject]
  private IJSRuntime JS { get; set; } = default!;

  private async Task<int> GetHighScoreAsync()
  {
    try
    {
      var value = await JS.InvokeAsync<string>("fb.get", "fb_highscore");
      if (int.TryParse(value, out var v)) return v;
      return 0;
    }
    catch { return 0; }
  }

  private async Task SetHighScoreAsync(int value)
  {
    try { await JS.InvokeVoidAsync("fb.set", "fb_highscore", value.ToString()); } catch { }
  }
}

